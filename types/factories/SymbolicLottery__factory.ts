/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  SymbolicLottery,
  SymbolicLotteryInterface,
} from "../SymbolicLottery";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "choice",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "BetPlaced",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "winningNumber",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "prizePerWinner",
        type: "uint256",
      },
    ],
    name: "WinnerDrawn",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "WinningsWithdrawn",
    type: "event",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "bets",
    outputs: [
      {
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "choice",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "drawInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "drawWinner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lastDrawTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxBets",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxBetsPerPlayer",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_choice",
        type: "uint256",
      },
    ],
    name: "placeBet",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "playerBetCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "playersByChoice",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winningNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "winnings",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawWinnings",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052662386f26fc1000060385562015180603a556001603c556064603d5534801561002c57600080fd5b50610c408061003c6000396000f3fe6080604052600436106100f35760003560e01c806392dc9d6f1161008a578063bc06c4cc11610059578063bc06c4cc14610246578063cc42e83a1461025b578063ea3a149914610270578063f851a44014610290576100f3565b806392dc9d6f146101cf578063a61d0aed146101fc578063a95783b514610211578063b2185bb114610231576100f3565b80634664611e116100c65780634664611e1461017b5780635cbbd635146101905780638129fc1c146101a5578063853828b6146101ba576100f3565b8063072ea61c146100f857806310fe7c481461012357806322af00fa146101385780633b1d84a814610166575b600080fd5b34801561010457600080fd5b5061010d6102a5565b60405161011a9190610b7a565b60405180910390f35b61013661013136600461093b565b6102ab565b005b34801561014457600080fd5b5061015861015336600461093b565b610460565b60405161011a929190610996565b34801561017257600080fd5b5061010d610498565b34801561018757600080fd5b5061010d61049e565b34801561019c57600080fd5b5061010d6104a4565b3480156101b157600080fd5b506101366104aa565b3480156101c657600080fd5b506101366104f2565b3480156101db57600080fd5b506101ef6101ea366004610953565b610558565b60405161011a9190610982565b34801561020857600080fd5b5061010d610590565b34801561021d57600080fd5b5061010d61022c36600461090d565b610596565b34801561023d57600080fd5b506101366105a8565b34801561025257600080fd5b5061010d610785565b34801561026757600080fd5b5061013661078b565b34801561027c57600080fd5b5061010d61028b36600461090d565b61082d565b34801561029c57600080fd5b506101ef61083f565b60385481565b603d54603754106102d75760405162461bcd60e51b81526004016102ce90610a8f565b60405180910390fd5b603c5433600090815260356020526040902054106103075760405162461bcd60e51b81526004016102ce90610afd565b600a81106103275760405162461bcd60e51b81526004016102ce906109af565b60385434146103485760405162461bcd60e51b81526004016102ce90610ac6565b60408051808201825233808252602080830185815260378054600181810183556000928352955160029091027f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae810180546001600160a01b03939093166001600160a01b031993841617905592517f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31af90930192909255868152603683528581208054958601815581528281209094018054909116831790559082526035905290812080549161041683610baf565b9190505550336001600160a01b03167e1ecf1d0c4d22f324b3ecb9cdf0e5f772bc74ac104e6626f4b3845433d031058234604051610455929190610974565b60405180910390a250565b6037818154811061047057600080fd5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b603c5481565b603b5481565b60395481565b60005460ff16156104cd5760405162461bcd60e51b81526004016102ce90610b51565b6000805460ff1916600117905542603955603380546001600160a01b03191633179055565b6033546001600160a01b0316331461051c5760405162461bcd60e51b81526004016102ce906109d7565b6033546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015610555573d6000803e3d6000fd5b50565b6036602052816000526040600020818154811061057457600080fd5b6000918252602090912001546001600160a01b03169150829050565b603d5481565b60356020526000908152604090205481565b603a546039546105b89190610b83565b4210156105d75760405162461bcd60e51b81526004016102ce90610a58565b6037546105f65760405162461bcd60e51b81526004016102ce90610b2b565b600a424460405160200161060b929190610974565b6040516020818303038152906040528051906020012060001c61062e9190610bca565b603b81905560009081526036602090815260408083208054825181850281018501909352808352919290919083018282801561069357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610675575b505050505090506000808251116106ab5760006106b7565b81516106b79047610b9b565b905060005b82518110156107395781603460008584815181106106ea57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008282546107219190610b83565b9091555081905061073181610baf565b9150506106bc565b5042603955603b546040517f8ddb7350e1a20c40ccef93cd3c52e15ff5be8e57c1de12f3e122e355d2288e8c91610771918490610974565b60405180910390a161078161084e565b5050565b603a5481565b33600090815260346020526040902054806107b85760405162461bcd60e51b81526004016102ce90610a28565b336000818152603460205260408082208290555183156108fc0291849190818181858888f193505050501580156107f3573d6000803e3d6000fd5b50336001600160a01b03167f24215bbaf0832fa4d6ffef16dee3971d8b714921fef3ad63f793d578983c6dc2826040516104559190610b7a565b60346020526000908152604090205481565b6033546001600160a01b031681565b61085a6037600061088f565b60005b600a81101561055557600081815260366020526040812061087d916108b0565b8061088781610baf565b91505061085d565b508054600082556002029060005260206000209081019061055591906108ce565b508054600082559060005260206000209081019061055591906108f8565b5b808211156108f45780546001600160a01b0319168155600060018201556002016108cf565b5090565b5b808211156108f457600081556001016108f9565b60006020828403121561091e578081fd5b81356001600160a01b0381168114610934578182fd5b9392505050565b60006020828403121561094c578081fd5b5035919050565b60008060408385031215610965578081fd5b50508035926020909101359150565b918252602082015260400190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252600e908201526d43686f697820696e76616c69646560901b604082015260600190565b60208082526031908201527f5365756c206c2761646d696e697374726174657572207065757420617070656c60408201527032b91031b2ba3a32903337b731ba34b7b760791b606082015260800190565b6020808252601690820152752830b99032329033b0b4b7399030903932ba34b932b960511b604082015260600190565b60208082526017908201527f496e74657276616c6c65206e6f6e207265737065637465000000000000000000604082015260600190565b6020808252601f908201527f4e6f6d627265206d6178696d756d2064652070617269732061747465696e7400604082015260600190565b60208082526019908201527f4c61206d6973652065737420646520302e303120657468657200000000000000604082015260600190565b60208082526014908201527313585e081919481c185c9a5cc8185d1d195a5b9d60621b604082015260600190565b6020808252600c908201526b50617320646520706172697360a01b604082015260600190565b6020808252600f908201526e44656a6120696e697469616c69736560881b604082015260600190565b90815260200190565b60008219821115610b9657610b96610bde565b500190565b600082610baa57610baa610bf4565b500490565b6000600019821415610bc357610bc3610bde565b5060010190565b600082610bd957610bd9610bf4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea26469706673582212201798421246c5c071b0994d2b73765633b19c0af7e5083d94c27d0eb4d8d59fca64736f6c63430008000033";

type SymbolicLotteryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SymbolicLotteryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SymbolicLottery__factory extends ContractFactory {
  constructor(...args: SymbolicLotteryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SymbolicLottery> {
    return super.deploy(overrides || {}) as Promise<SymbolicLottery>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SymbolicLottery {
    return super.attach(address) as SymbolicLottery;
  }
  override connect(signer: Signer): SymbolicLottery__factory {
    return super.connect(signer) as SymbolicLottery__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SymbolicLotteryInterface {
    return new utils.Interface(_abi) as SymbolicLotteryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SymbolicLottery {
    return new Contract(address, _abi, signerOrProvider) as SymbolicLottery;
  }
}
