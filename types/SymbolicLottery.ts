/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface SymbolicLotteryInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "bets(uint256)": FunctionFragment;
    "drawInterval()": FunctionFragment;
    "drawWinner()": FunctionFragment;
    "entryFee()": FunctionFragment;
    "initialize()": FunctionFragment;
    "lastDrawTime()": FunctionFragment;
    "maxBets()": FunctionFragment;
    "maxBetsPerPlayer()": FunctionFragment;
    "placeBet(uint256)": FunctionFragment;
    "playerBetCount(address)": FunctionFragment;
    "playersByChoice(uint256,uint256)": FunctionFragment;
    "winningNumber()": FunctionFragment;
    "winnings(address)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
    "withdrawWinnings()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "bets"
      | "drawInterval"
      | "drawWinner"
      | "entryFee"
      | "initialize"
      | "lastDrawTime"
      | "maxBets"
      | "maxBetsPerPlayer"
      | "placeBet"
      | "playerBetCount"
      | "playersByChoice"
      | "winningNumber"
      | "winnings"
      | "withdrawAll"
      | "withdrawWinnings"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "drawInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "drawWinner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "entryFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastDrawTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxBets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxBetsPerPlayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "placeBet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "playerBetCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "playersByChoice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "winningNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "winnings",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawWinnings",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "drawInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawWinner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "entryFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastDrawTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxBets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxBetsPerPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "placeBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerBetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playersByChoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "winningNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "winnings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawWinnings",
    data: BytesLike
  ): Result;

  events: {
    "BetPlaced(address,uint256,uint256)": EventFragment;
    "WinnerDrawn(uint256,uint256)": EventFragment;
    "WinningsWithdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BetPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WinnerDrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WinningsWithdrawn"): EventFragment;
}

export interface BetPlacedEventObject {
  player: string;
  choice: BigNumber;
  value: BigNumber;
}
export type BetPlacedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BetPlacedEventObject
>;

export type BetPlacedEventFilter = TypedEventFilter<BetPlacedEvent>;

export interface WinnerDrawnEventObject {
  winningNumber: BigNumber;
  prizePerWinner: BigNumber;
}
export type WinnerDrawnEvent = TypedEvent<
  [BigNumber, BigNumber],
  WinnerDrawnEventObject
>;

export type WinnerDrawnEventFilter = TypedEventFilter<WinnerDrawnEvent>;

export interface WinningsWithdrawnEventObject {
  player: string;
  amount: BigNumber;
}
export type WinningsWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  WinningsWithdrawnEventObject
>;

export type WinningsWithdrawnEventFilter =
  TypedEventFilter<WinningsWithdrawnEvent>;

export interface SymbolicLottery extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SymbolicLotteryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { player: string; choice: BigNumber }>;

    drawInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    drawWinner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    entryFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lastDrawTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxBets(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxBetsPerPlayer(overrides?: CallOverrides): Promise<[BigNumber]>;

    placeBet(
      _choice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    playerBetCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    playersByChoice(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    winningNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    winnings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawWinnings(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  bets(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { player: string; choice: BigNumber }>;

  drawInterval(overrides?: CallOverrides): Promise<BigNumber>;

  drawWinner(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  entryFee(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lastDrawTime(overrides?: CallOverrides): Promise<BigNumber>;

  maxBets(overrides?: CallOverrides): Promise<BigNumber>;

  maxBetsPerPlayer(overrides?: CallOverrides): Promise<BigNumber>;

  placeBet(
    _choice: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  playerBetCount(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  playersByChoice(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  winningNumber(overrides?: CallOverrides): Promise<BigNumber>;

  winnings(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawWinnings(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { player: string; choice: BigNumber }>;

    drawInterval(overrides?: CallOverrides): Promise<BigNumber>;

    drawWinner(overrides?: CallOverrides): Promise<void>;

    entryFee(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    lastDrawTime(overrides?: CallOverrides): Promise<BigNumber>;

    maxBets(overrides?: CallOverrides): Promise<BigNumber>;

    maxBetsPerPlayer(overrides?: CallOverrides): Promise<BigNumber>;

    placeBet(
      _choice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    playerBetCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playersByChoice(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    winningNumber(overrides?: CallOverrides): Promise<BigNumber>;

    winnings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;

    withdrawWinnings(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "BetPlaced(address,uint256,uint256)"(
      player?: PromiseOrValue<string> | null,
      choice?: null,
      value?: null
    ): BetPlacedEventFilter;
    BetPlaced(
      player?: PromiseOrValue<string> | null,
      choice?: null,
      value?: null
    ): BetPlacedEventFilter;

    "WinnerDrawn(uint256,uint256)"(
      winningNumber?: null,
      prizePerWinner?: null
    ): WinnerDrawnEventFilter;
    WinnerDrawn(
      winningNumber?: null,
      prizePerWinner?: null
    ): WinnerDrawnEventFilter;

    "WinningsWithdrawn(address,uint256)"(
      player?: PromiseOrValue<string> | null,
      amount?: null
    ): WinningsWithdrawnEventFilter;
    WinningsWithdrawn(
      player?: PromiseOrValue<string> | null,
      amount?: null
    ): WinningsWithdrawnEventFilter;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    drawInterval(overrides?: CallOverrides): Promise<BigNumber>;

    drawWinner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    entryFee(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lastDrawTime(overrides?: CallOverrides): Promise<BigNumber>;

    maxBets(overrides?: CallOverrides): Promise<BigNumber>;

    maxBetsPerPlayer(overrides?: CallOverrides): Promise<BigNumber>;

    placeBet(
      _choice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    playerBetCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playersByChoice(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    winningNumber(overrides?: CallOverrides): Promise<BigNumber>;

    winnings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawWinnings(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    drawInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    drawWinner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    entryFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lastDrawTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxBets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxBetsPerPlayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeBet(
      _choice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    playerBetCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playersByChoice(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    winningNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    winnings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawWinnings(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
